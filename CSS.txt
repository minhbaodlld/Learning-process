GLOSSARY
I. STYLING IN HTML
	
II. COLOR

III. CSS VARIABLE

IV. MEDIA QUERY

V. APPLIED VISUAL DESIGN	

Vi. INTERACTIVITY

VII. APLLIED ACCESSIBILITY

VIII. RESPONSIVE WEB DESIGN



I. STYLING IN HTML
- in-line style (= "color:red;"): attribute of tag, change tag color
	
 	
- style tag <style></style>: 
	<style>
		<tag>{ change style}
	</style>
	+the order of the class declarations in the <style> section is important
	which ever came last take priority

	+color
	+font-size
	+font-family: FAMILY_NAME, GENERIC_NAME(in case family name can't load)
		case sensitive, put in quote if has space
	"Arial", Open Sans, etc
	
	+border: -width, -color, -style, -radius
		border short for: width, style, color
		E.g: border: 5px solid red
	+width:
	+height
	+background-color:
	+font-weight:
	+line-height: vertical space between each line
	+background: linear-gradient(gradient_direction, color 1, color 2, color 3,...)
		+url("")
	+transform: function: scale(); change scale of elements
		.move():
		.rotate():
		.skewX(): skews selected element along its X(horizontal) axis
		.skewY(): skews selected element along its Y(vertical) axis


	
- .: class
	+tag class style overide body element style
	+Id style take priority over class
	+in-line style override all declaration in style tag
	+!important has highest priority over all other style, place after a style line in css	
	+multiple class: class='class1 class2'

- list: spacing between <li> element
	li{
	   margin: 10px;
	}
	remove list bullet point
	+list-style: none

- * selector: select every elements

- # = id
use: #id <element>, #id <element>, etc to style sub element within that id

- Absolute unit: in/ mm physical units of length

- Relative unit: em/ rem, 
	+em: based on sized of font (2em = 2*font-size)
	+rem: font-size of root element
	+vw (viewport width): 10vw = 10% viewport's width
	+vH (viewport height):
	+vmin (viewport min): 70vmin = 70% viewport's smaller dimension (height or width)
	+vmax (viewport max): 100vmax = 100% viewport's bigger dimension (height or width)


- padding: controls amount of space between elements's content and border
	+top, right, bottom left (clockwise notation)
	+padding: 10px, 10px, 10px, 10px

- margin: controls space between elements's border and surroundind elements
	+negative margin: grow larger
	+top, right, bottom left (clockwise notation)


- CSS class: create css class, other tag can use class attribute to change style
	<style>
		.blue-text{ color: blue}
	</style>

- Selector [attribute = value]: [type = 'radio']


+TEXTBOX
- Border-radius(a,b,c,d): rounding corner 
	+ 4 values: clockwise start top left
- padding:
- margin:
- box-shadow:

+FONT
- font-size:
- font-weight:(normal = 400/ bold = 700/ bolder/ lighter/ 100-900)


+COMMENT: /* */



II. COLOR
- Hexadecimal code: 16 base number, 16 distinct symbols 0-9 + A-F(10-15)
- Css use 6 hexadecimal digits to represent colors
- 2 hexadecimal for each red(R)/ green(G)/ blue(B) | shorten form 3 digit, 1 for each color
	+red: #FF0000 | #F00	

- RGB value: rgb(r, g, b)
	rgb(255, 255, 255): white

- Tertiary colors: Primary(red) + neighbor Secondary(yellow)= Tertiary(orange)
- complementary color in hexadecimal: #FFFF00 vs #0000FF

- hsl(): hue, saturation, lightness
	+Hue: takes value 0-360
	+Saturation: amount of gray in color, value as %
	+Lightness: amount of white or black, value as %

- Gradient color: Apply color as gradient
	+background: linear-gradient(gradient_direction, color 1, color 2, color 3,...);
	+repeating-linear-gradient(): 	angle value = direction of gradient
					color stops(%/ no of pixels) = width value where transition takes place
					...pixel: ... pixels away from the start 
		repeating-linear-gradient(
      		    90deg,
      		    yellow 0px,
      		    blue 40px,
      		    green 40px,
      		    red 80px
		)

- 
	




III. CSS VARIABLE
- variable:
	 --variable name: color, backup color
- referencing variable to access its value:
	background: var(--penguin-skin);
- inherit css variables: 
root pseudo-class selector, variable creating in :root will be available
globally

	<style>
		:root{

		}
	</style>

	:root style can be override in class for specific area

- Pseudo-classes
	+ :root: css varible 
	+ :hover: apply styling while hover over element

- Pseudo-elements: :
  +:before and ::after: used to add something before or after selected element
	- content property: must have, add photo/ text etc





IV. MEDIA QUERY
- @media include block of CSS properties only certain condition is true
	@media only screen and (max-width: 600px)
	Media Type:
	+screen: computer/tablet /phone		+print: for printers
	+all					+speech: screenreaders "reads" page out loud

- Always design for mobile first: design for mobile before desktop or other devices

	/* For mobile phones: */
	[class*="col-"] {
	  width: 100%;
	}

	@media only screen and (min-width: 600px) {
	  /* For tablets: */
	  .col-s-1 {width: 8.33%;}
	  .col-s-2 {width: 16.66%;}
	}
	
	@media only screen and (min-width: 768px) {
	  /* For desktop: */
	  .col-1 {width: 8.33%;}
	  .col-2 {width: 16.66%;}
	  .col-3 {width: 25%;}
	}

- Typical breakpoint:
	
	/* Extra small devices (phones, 600px and down) */
	@media only screen and (max-width: 600px) {...}

	/* Small devices (portrait tablets and large phones, 600px and up) */
	@media only screen and (min-width: 600px) {...}

	/* Medium devices (landscape tablets, 768px and up) */
	@media only screen and (min-width: 768px) {...}

	/* Large devices (laptops/desktops, 992px and up) */
	@media only screen and (min-width: 992px) {...}

	/* Extra large devices (large laptops and desktops, 1200px and up) */
	@media only screen and (min-width: 1200px) {...}	
	

@media only screen and (condition) 
- Orientation: portrait/ landscape
	(orientation: landscape)	
	
- Hide elements with media queries
      	(max-width: 600px) {
  	    div.example {
    		display: none;

- Change font size:
   @media only screen and (min-width: 601px) {
  	div.example {
            font-size: 80px;

- Comma separated list: add additional media query using comma = or operator
	@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {
		
		




V. APPLIED VISUAL DESIGN
.CSS treat each HTML element as its own box = CSS Box Model
Block-level items automatically start on a new line (paragraph, heading, divs,etc)
inline item sits within surrounding content(images, span, etc)

- text-align: 	+justify: all lines except last line to meet left + right edge
		+center		+left		+right

- strong tag <strong></strong>: bold
	CSS: font-weight: bold;
- u tag <u></u>: underline
	CSS: text-decoration: underline;
another method is to wrap element in span tag the ad botter bottom
allow underline styling
	<span><p></p><span>	
- em tag <em></em>: italiciezed
	CSS: font-style: italic;
- s tag <s></s>: strikethrough
	CSS:text-decoration: line-through;
- hr tag <hr>: horizontal line through page

- Box-Shadow style:( 
	offset-x: how far to push shadow horizontally from element
	offset-y: how far to push shadow vertically from element
	blur-radius;
	color:
	)
  multiple box shadow can be created separated by comma
	box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);

- Text-transform:
	+ lowercase	+ uppercase
	+ capitalize	+ initial: use default value
	+ none		+ inherit: use text-transform value of parent element




+POSITION:
	- Relative: allow CSS to move it relative to where it normally positioned in normal flow of the page
		pair with: left, right, top, bottom

	- Absolute: lock place relative closest positioned ancestor, removes element
	from normal flow of document so surrounding items ignore it. If no position rule for parent
	items, browser default to body tag.
		pair with: left, right, top, bottom

	- Sticky: both relative + fixed (based user's scroll position)
position relative till offset is met in viewport -> stick in place(like fixed)
	
	- Fixed: type of absolute positioning, locks element to browser window. 
	fixed element won't move when scroll/ will stay the same position anywhere on the page

	- Static: default, not positioned,
	isn't affected top/bottom/left/right, position according page's flow
	
	
- left/right/top/bottom: +auto
			 +unit, %
			 +initial/ inherit

- Float: removed from flow, pushed left/ right of containing parent, wrap element around
use width specify horizontal space float element requires
work well with 2 column layout

- z-index: specify order how elements are stacked, higher number higher priority
can be negative

- margin: auto = center block element horizontally

- display: block, turn inline -> block

- visibility: 	hidden: hides element still take up space
		visible: show		

- overflow: hidden: hide scrollbar if element rendered outside of parent element/ widow
	

VI. INTERACTIVITY
- Using transform with pseudo-class add interactiivty
- Transition: specify 2 things:
		+CSS property to add effect
		+duration
 	E.g: div{
		width: 100px;
		height: 100px;
		background: red;
		transition: width 2s, height 2s;
	     div:hover{
		width: 300px;
		height: 300px;

	E.g:	p:hover{
		transform: scale(2.1);
	     }
	+transition: -delay
		     -duration
		     -property
		     -timing-function: 	. ease: starts slow, speeds up middle, slows down in the end
					. ease-out: quick beginning -> slow down
					. ease-in: slow beginning -> speed up
					. linear: constant speed throughout
					. cubic-bezier: function consists 4 main points p0-3, 1 by 1 grid
						p0(0,0), p3(1,1) constant. 
						cubic-bezier(x1, y1, x2, y2) )(x = 0-1, y >1)
	





- Animation: @keyframes:  
	8 attribute
	+animation-name: sets name used later
	+animation-duration: sets animation duration
	+animation-fill-mode: [forwards]; specifies style when animation finished 
	+animation-iteration-count: control # animation loops
	+animation-timing-function: quickly animated element changes over time
		. ease: starts slow, speeds up middle, slows down in the end
		. ease-out: quick beginning -> slow down
		. ease-in: slow beginning -> speed up
		. linear: constant speed throughout
		. cubic-bezier: function consists 4 main points p0-3, 1 by 1 grid
		p0(0,0), p3(1,1) constant. 
			cubic-bezier(x1, y1, x2, y2) (x = 0-1, y >1)
	

- Movement: position = fixed/relative, top/ left/ bottom/ right used create movement
	
E.g: fading element left to right
	 @keyframes fade {
   	   50% {
      	   left: 60%;
           opacity: 0.1;
    	   }
  	}	

- Elements at varible Rates:
	+@keyframes
	   20%{}
	   50%{}
	+animation duration: 0.9s, 1.0s, 1.1s;




VII. APPLIED ACCESSIBILITY
- display: none; or visibility: hidden: hide content from everyone, including screen reader
- display: +inline: -flex, -grid, -block, -table

- Zero values for pixel sizes (width:0px, height: 0px) remove element from the flow, screen reader ignore
- text contrast: at least 4.5:1


:hover{
- cursor: poiter; 
- transition-duration: 1s; 
}	






VIII. RESPONSIVE WEB DESIGN PRINCIPLES
- responsive image: using css rule
	img{
	   max-width: 100%;
	   height: auto;
	}

- Viewport unit for responsive typography
	+vw (viewport width): 10vw = 10% viewport's width
	+vH (viewport height): 10vH = 10% viewport's height
	+vmin (viewport min): 70vmin = 70% viewport's smaller dimension (height or width)
	+vmax (viewport max): 100vmax = 100% viewport's bigger dimension (height or width)




IX. FLEX BOX
- dislay: flex: put element in flex container
- flex-direction: make aligning children of elements into row/ column possible
	+: row, row-reverse
	+: column, column-reverse
	
- justify-content: align and space out flex items along cross axis.
flex item side-by-side left-to-right/ top-to-bottom along main axis
main axis = direction flex items are arranged
cross axis= perpendicular to main axis
	+center: align to center
	+flex-start: default alignment, push items to left/ top depend on row/ column
	+flex-end: push item to right/ bottom of flex container (row/ column)
	+space-between: first -> left, last -> right, other item evenly distributed with space between
	+space-around: half space between either end, space distributed evenly among items
	+space-evenly: evenly space	

- align-items property(container): similar to justify-content except
align flex items along cross axis
	+flex-start:
	+flex-end:
	+center:
	+stretch: default, stretch item to fill flex container
	+baseline: align to baseline; baseline text concept, line letters sit on 
	
- flex-wrap(container): wrap extra flex item into new rows/columns, break point depend on size of item + container
	+nowrap: default, does not wrap
	+wrap: wrap left-to-right or top-to-bottom
	+wrap-reverse: right-to-left or bottom-to-top

* Flex Item
-flex: shorcut for item properties
	flex: 1 0 10px = flex-grow: 1, flex-shrink: 0, flex-basis: 10px
	- flex-shrink(property of flex items): item shrink if flex container too small
		+1,2,3, etc:  higher = smaller
	- flex-grow: grows item if paren container expand
		+1,2,3,etc: higher = bigger
	- flex-basis(px, em, %, etc): specifies initial size
		+auto: size base on content

- order property: order flex items appear, default same order as source HTNL
 	number value +/-

- algin-self: adjust item individually
	accept same values as align-items but override it
	+flex-start:
	+flex-end:
	+center:	
	+stretch:
	+baseline:



IX. GRID
- display: grid: turn HTML element -> grid container
- float, display: inline-block, display: table-cell, vertical-align and column
properties have no effect on a grid item.

*Grid Container
- Grid need defined structure
- grid-template-columns: 50px 50px; = 2 columns each 50px wide
	+fr: set to fraction available space
	+auto: sets to width/ height of its content automatically
	+%: percent width container
- grid-template-rows: same as columns
	
- grid-gap: shortcut for column + row gap	
	- grid-column-gap: add gap between columns
	- grid-row-gap: add gap for rows

- justify-content: align whole grid inside container horizontally	
			+space-evenly:
			+space-around:
			+space-between:
			+center:
			+start:
			+end:

- align-content: align whole grid inside container vertically
			+properties same as justify-content


			
*Grid Item:
- grid-column: define which column to place an item
start/end line number ; control amount columns item uses
short for: grid-column-start + end

	grid-column: 1/3; start 1st | on the left -> 3rd | consume 2 columns

- grid-row: define which row to place an item


- justify-self: align content within a cell(box each item in) horizontally
	+stretch: by default
	+start: left of cell
	+center: center of cell
	+end: right of cell

- align-self: align vertically
	same property as justify-self
	+stretch, start, center, end

- justify-items: move all item to desired alignment horizontally
	same property as justify/align-self
	+stretch, start, center, end

- align-item: set vertical alignment for all items
	

- grid-template-areas: group cells into groups and give custom name
  "header header header"
  "advert content content"
  "footer footer footer";

	merges 3 cell -> area named header; bottom 3 -> footer; 2 area middle advert + content
	every word = a cell
	pair "" = row
	. (period) = empty cell

-grid-template-columns and grid-template-rows: used to create large number of rows/ columns
	+ repeat function (number of repeats, value to repeat)
		grid-template-rows: repeat(100,50px); 100 rows each 50px tall
		grid-template-columns: repeat(2, 1fr 50px) 20px; 
			each value in repeat represent seperate column, 20px is another column
	  
	+ auto-fill: automatically insert as many rows/columns as possible within container size
	   	repeat(autofill, minmax(60px, 1fr));
		keep inserting 60px columns and stretching them until another one can be insert
	if container can't fit all items 1 row, move to new one			

	+ minmax function: limit item size when container changes size
		grid-template-columns: 100px minmax(50px, 200px);		
		
	+ auto-fit: similar to auto-fill except if container's size exceed size of all items
		-auto-fill: keep inserting empty rows/columns, pushes items to side
		-auto-fit: collapse empty rows/columns + stretches item to fit container
	
- grid-area: after creating template place item in custom area by referencing their name
	.item1 {
	   grid-area: header;	
	}
	item1 class go in area named header
	
	+ when no template available
	item1(grid-area: 1/1/2/4;}
	1/1/2/4 = horizontal | start/ vertical | start/ horizontal | end/ vertical line end
		| = line
	item1 consume rows between | 1-2, column between | 1-4

	
- Usage of Media Query to create responsive layout
  @media (min-width: 300px){
    .container{
      grid-template-columns: auto 1fr;
      grid-template-rows: auto 1fr auto;
      grid-template-areas:
        "advert header"
        "advert content"
        "advert footer";
    }
  }

  @media (min-width: 400px){
    .container{
      grid-template-areas:
      /* Only change code below this line */
        "header header"
        "advert content"
        "footer footer";
      /* Only change code above this line */


- Grid within grid: turn element -> grid affect direct descendants
turn direct descendants -> grid -> grid within grid
	setting display + grid-template-columns -> grid within grid

		
	





