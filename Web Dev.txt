https://en.wikipedia.org/wiki/Web_application_development

_WORDPRESS, Content Management System
_FRONT END: HTML, CSS, JAVASCRIPT
_BACK-END: C#, PYTHON, JAVA, PHP
_SQL, MYSQL


-Model, View, Control (MVC):Pattern for structuring files, project, split responsibilities
	+Model(data): central component, dynamic data structure, independent of UI
	directly manage data and rules of app
	
	+View(UI): representation of information

	+Controller(request handler): accept -> convert input for model of view
+model responsible managing data, receives user input controller
+view presentation of model in partucular method
+controller: responds user input, performs tnteractions data model objects

-Advantages: 
	+Simultaneous development
	+High cohesion: 
	+Loose coupling: 
	+Ease of Modification: 
	+Multiple views for a model:
	+Testability:

-Disadvantages:
	+Code navigability: complex, layers of indirection -> adapt decomposition criteria
	+Multi-artifact consistency: scattering, maintance consitency multiple representation at once
	+Undermined by inevitable clustering: computation + state clustered -> 3 program parts
	+Excessinve boilerplate:
	+Pronounced learning curve:
	+Lack of incremental benefit: 

-Multi Page Application: every request lead to a new page
-Advantages:
	+SEO is simple
	+Loads of existing frameworks, solution and best practices

-Disadvantages:
	+Slower, constantly needs to load pages
	+Tightly coupled frontend and backend

	+support more legacy browsers

-Adopted by: Node express, laravel for PHP, Vue and React can also be used on MPA


-Single-Page Application(SPA): rewrite current page with new data from server -> faster transitions
more mobile experience
perform most UI logic web browser
	+Adopted by: AngularJS, React and Vue.js ...

-Advantages:
	+Highly reactive
	+Decoupled frontend
-Disadvantages:
	+SEO is challenging, hard to crawl content
	+JavaScript strictly required

	+Favor modern browser


-https://www.reddit.com/r/learncsharp/comments/74h3j0/mvc_vs_spa_and_related_frameworks_advice_for/

-https://vuejs.org/v2/guide/


*ANGULAR, REACT and VUE
-Philosophy: core: building UI from reusable component

	Angular: one stop shop
	+feature-rich, everything built-in
	+platform than framework
	+Beyond code: Command line interface(CLI), Progressive Web App(PWA),...

	React:
	+Minmalistic, focus UI-building
	+Library than framework
	+Community needed for routing, http,...

	Vue:
	+Berwwen Angular and React
	+Framework, focused on code
	+Code + CLI 

- 
	