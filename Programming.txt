* Compilation = translation into machine language
        +faster to run, slower to develop, compiled new feature bug tested
* Interpretation = translator translate each line of code into machine language and execute
        +slowing execution of program, faster to develop <- simpler language, no compiling every time


* Compiled scheme: Program's source code is compiled to machine code
GCC(C,C++), MSVC(C?C++), ghc (Haskell), fpc + gpc (Pascal), V8(JavaScript)


-  Interpreted scheme: program's source code is interpreted line-by-line
PHP3 + before (PHP), Spidermonkey (JavaScript)


-Mixed scheme: compile to intermediate form never to machine code
Sun Java selective compile parts of its code to machine code for optimization(Just-in-time compilation)


        +        Virtual Machine scheme: Program's source code compiled -> platform-independent byte-code file, Virtual machine interpret byte-code
        javac and JVM(Sun Java), CPython(Python), PHP4 + above, .Net(C#, VB.NET)                        
        
        +        Abstract Syntax tree scheme: Program's source code compiled in-memory object -> source code only read once program is run
        perl(Perl), pugs(Perl)




*Basic goals of computer programming
When you are planning to create a computer program you should:


 - Ensure your program fulfills the need it is addressing.
 - Ensure that people can easily use your program.
 - Ensure that it is easy to understand, fix, and improve your program without a major time investment.
 - Enhance problem solving using logic.
 - Developing a high understanding of principles in programming. 
 - Demonstrating basic concepts, and software applications.
 - Recognizing ethical working codes.


*Common problems
 - Your program does not do a job any better than an available alternative program. At best, you're re-inventing the wheel.
 - Your program does not work as intended.
 - Your program is too complicated or too primitive to be useful to most people.
 - Other people, or yourself at a later time, can't understand the programming behind your program. This means your project won't grow.


*Solutions
-        Utility and Usability
        +        Survey the field to look for programs similar to what you intend to develop. Determine what you like and don't like about those programs. Figure out ways to improve those programs.


        +        Find source code for similar programs to what you want to make if at all possible. Unfortunately, people often write a lot of inferior code and leave it floating around the Internet. Don't be one of those people. Only release useful, well-written programs.


         +        Thoroughly plan what you want your program to do before you start working on it. One way to do this is to make a flowchart of what you want your program to do.


        +        Aim towards the maximum functionality your program can achieve while maintaining minimal complexity. Think of the iPod, matchstick, doorknob and television. They are simple yet effective.


        +        If possible, talk to people who might use your program to get an idea of what features they would want or expect.


        +        Remember the 80–20 rule: 20% of the features in most programs are used 80% of the time. If you can successfully identify even a few of the seldom used features and leave them out, you can save yourself some time and frustration.


* Maintainability
        +        Make it easy for someone to look at your program's source code and understand what's going on.


        +        Use comments when you're doing somewhat complicated things in your program, or when in doubt.


        +        Always choose readability of your code over memory performance. Though in the short run this may not always be the best choice, in the long run, the performance can be improved if the code is easy to understand.


        +        Use simple, easy-to-understand names for variables. The convention is that a variable should be written variable_name or variableName.


        +        Look at examples of source code, and especially source code intended as an example of proper programming form. Recognize the structure they're using to make things simple.


*Make programming easy for you and everybody else
-        Computers and computer programs are intended to make our lives easier, not more complicated.
-        Programmers have figured out a very good way of doing things: Free Software.


-        Free Software is software written by an author who has released that software with the source code, freely available for anybody to look at, modify, improve and implement into their own software. Just like wiki, this is an easy, efficient and useful way of doing things.


-        To make programming easier for all coders, you should:


        Release under GPL GNU General Public License
        Take advantage of Free Software to create more Free Software
        Make your code readable and efficient